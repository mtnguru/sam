<?php

/**
 * @file
 * Functions to support theming in the sa_neato theme.
 */

use Drupal\az_groups\azGroupConfig;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements template_preprocess_html().
 * @param array $variables
 */
function sa_neato_preprocess_html(&$variables) {
  if (!empty($variables['page']['sidebar_first'])) {
    $sidebar_left = $variables['page']['sidebar_first'];
  }

  if (!empty($variables['page']['sidebar_second'])) {
    $sidebar_right = $variables['page']['sidebar_second'];
  }

  // Dynamic sidebars.
  if (!empty($sidebar_left) && !empty($sidebar_right)) {
    $variables['attributes']['class'][] = 'two-sidebars';
  }
  elseif (empty($sidebar_left) && !empty($sidebar_right)) {
    $variables['attributes']['class'][] = 'one-sidebar';
    $variables['attributes']['class'][] = 'sidebar-second';
  }
  elseif (!empty($sidebar_left) && empty($sidebar_right)) {
    $variables['attributes']['class'][] = 'one-sidebar';
    $variables['attributes']['class'][] = 'sidebar-first';
  }
  else {
    $variables['attributes']['class'][] = 'no-sidebars';
  }

  $host = \Drupal::request()->getHttpHost();
  $site = azGroupConfig::getConfig($host);
  $variables['attributes']['class'][] = $site['class'];
}

/**
 * Implements template_preprocess().
 */
function sa_neato_preprocess(&$variables) {
  // Make 'is_front' available to all templates.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }

  // Make the full node content-type available to all templates.
  $variables['em_route_name'] = \Drupal::routeMatch()->getRouteName();
  $route_match = \Drupal::routeMatch();
  if ($route_match->getParameter('node') && is_object($route_match->getParameter('node'))) {
    $variables['em_root_content_type'] = $route_match->getParameter('node')->bundle();
  }
}

/**
 * Implements template_preprocess_page.
 *
 * @param array $variables
 */
function sa_neato_preprocess_page(&$variables) {
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = [
    '#type' => 'link',
    '#title' => $site_name,
    '#url' => Url::fromRoute('<front>')
  ];
  $variables['em_linked_site_name'] = [
    '#type' => 'link',
    '#title' => $site_name,
    '#url' => Url::fromRoute('<front>')
  ];
}


/**
 * @param $variables
 */
function sa_neato_system_menu_block_top(&$variables) {
  $sites = [
    'em' => [
      'hosts' => [
        'etherealmatters.org',
        'em',
      ],
      'name' => 'Ethereal Matters',
      'theme' => 'ethereal-matters',
      'menu' => 'ethereal-matters',
      'icon' => 'public://icons/sam_carbon.png'
    ],
    'sam' => [
      'hosts' => [
        'structuredatom.org',
        'atom',
      ],
      'name' => 'Structured Atom Model',
      'theme' => 'structured-atom-model',
      'menu' => 'structured-atom-model',
      'icon' => 'public://icons/sam_carbon.gif'
    ],
    'geo' => [
      'hosts' => [
        'eugeology.rocks',
        'eg',
      ],
      'name' => 'EUGeology.rocks',
      'theme' => 'eu-geology',
      'menu' => 'eu-geology',
      'icon' => 'public://icons/geo.png'
    ],
  ];

  $currentMenu = null;
  $host = str_replace('.','-',\Drupal::request()->getHttpHost());
  foreach ($sites as $sitename => $site) {
    foreach ($site['hosts'] as $hostname) {
      if ($host == $hostname) {
        $variables['az'] = $site;

        // Load the appropriate menu
        $menu_parameters = new \Drupal\Core\Menu\MenuTreeParameters();
        $menu_parameters->setMaxDepth(2);
//      $menu_parameters->setRoot($root_menu_item->getPluginId());
//      $menu_parameters->excludeRoot();
        // Get the tree.
        $menu_tree_service = \Drupal::service('menu.link_tree');
        $tree = $menu_tree_service->load($site['menu'], $menu_parameters);
        // Apply some manipulators (checking the access, sorting).
        $manipulators = [
          ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
          ['callable' => 'menu.default_tree_manipulators:checkAccess'],
          ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
        ];
        $tree = $menu_tree_service->transform($tree, $manipulators);
        // And the last step is to actually build the tree.
        $variables['az']['top_menu'] = $menu_tree_service->build($tree);

        $variables['az']['icon_url'] = file_create_url($site['icon']);
        break;
      }
    }
  }

//$route_args = explode('/', str_replace('.','-',\Drupal::request()->getRequestUri()));
//if ($route_args[1]) {
//  switch ($route_args[1]) {
//    case 'dashboard':
//      break;
//  }
//}
}

/**
 * Implements template_preprocess_page.
 *
 * @param array $variables
 */
function sa_neato_preprocess_block(&$variables) {
  // Set top nav bar based on URL - structuredatom.org, eugeology.rocks, etc.
}

/**
 * Implements template_preprocess_node.
 * @param array $variables
 */
function sa_neato_preprocess_node(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $node = $variables['node'];

  if ($view_mode == 'full') {
  }

  if ($view_mode == 'search_result') {
    if ($node->bundle() == 'article') {
      $variables['content']['#item_type'] = $variables['node']->type->entity->label();
    }
  }
}

/**
 * Implements template_preprocess_group.
 * @param array $variables
 */
function sa_neato_preprocess_group(&$variables) {
  if (!empty($variables['elements']['field_hero_image'][0])) {
    // Trying to figure out how this works
    $fid = $variables['elements']['field_hero_image'][0]['#media']->image->target_id;
    $file =  \Drupal\file\Entity\File::load($fid);
    $variables['em_hero_image_uri'] = $file->uri;
//$variables['hero_image_url'] = Url::fromUri($file->uri->value);
    $variables['em_hero_image_url'] = file_create_url($file->uri->value);
  }
  return;
}

/**
 * Implements template_preprocess_region.
 * @param array $variables
 */
function sa_neato_preprocess_region(&$variables) {
  return;
}

/**
 * Implements template_preprocess_entity.
 * @param array $variables
 */
function sa_neato_preprocess_entity(&$variables) {
  return;
}

/**
 * Implements template_preprocess_media.
 * @param array $variables
 */
function sa_neato_preprocess_media(&$variables) {
  return;
}

/**
 * Implements HOOK_form_alter().
 *
 */
function sa_neato_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  return;
}


